import datetime
from .models import Post
from django.test import TestCase
from django.urls import reverse
from django.utils import timezone


# Create your tests here.
class PostModelTests(TestCase):

    def test_post_title_is_unique_string(self):
        """ Checks if the title of the post is unique and not
        generically generated by django"""
        new_post = Post(title="Sleeping Beauty")
        self.assertIs(new_post.title == "Sleeping Beauty", True)


    def test_post_time_is_not_in_future(self):
        """Checks that the time of post is not in the future"""
        time = timezone.now() + datetime.timedelta(days=1)
        now = timezone.now()
        future_post = Post(title='Yo', publish=time)
        self.assertNotEqual(future_post.publish, now, True)

def create_post(title, body, status, author):
    """
    create a post with a title, body and status
    :param title:
    :param body:
    :param status:
    :return: post
    """
    return Post.objects.create(title=title, body=body, status=status, author=author)

class PostListViewTests(TestCase):
    def test_no_posts(self):
        """
        if no posts exist, an appopriate message is received
        :return:
        """
        response = self.client.get(reverse('blog:post_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "There are no posts yet")
        self.assertQuerysetEqual(response.context['posts'], [])


    # def test_list_with_post_status_draft(self):
    #     """
    #     checks posts with status set to draft are not published
    #     :return:
    #     """
    #     post = Post(title='title1', status='draft')
    #     response = self.client.get(reverse('blog:post_list'))
    #     self.assertEqual(response.status_code, 200)
    #     self.assertIs(response.content == post, False)
    #
    #
    # def test_list_with_post_status_published(self):
    #     """
    #     checks posts with status set to published are not displayed
    #     :return:
    #     """
    #     post1 = Post(title='title1', status='published')
    #     response = self.client.get(reverse('blog:post_list'))
    #     self.assertEqual(response.status_code, 200)
    #     self.assertIs(response.content == post1, True)

